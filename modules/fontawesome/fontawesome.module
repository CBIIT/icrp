<?php
/**
 * @file
 * fontawesome.module
 * Drupal integration with Font Awesome, the iconic font for use with Bootstrap.
 */

define('FONTAWESOME_LIBRARY', 'fontawesome');
define('FONTAWESOME_NAME', 'Font Awesome');
define('FONTAWESOME_URL', 'http://fontawesome.io');
define('FONTAWESOME_CDN_URL', '//maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css');
define('FONTAWESOME_DOWNLOAD_URL', 'https://github.com/FortAwesome/Font-Awesome/archive/v4.5.0.zip');
define('FONTAWESOME_PREFIX', 'fa');

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function fontawesome_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.fontawesome':
      return '<p><i class="icon-flag icon-large"></i>' . t('<a href=":fontawesome_url">@fontawesome</a> is an iconic font designed for use with <a href=":bootstrap_url">Bootstrap</a>.', array(
        '@fontawesome' => FONTAWESOME_NAME,
        ':fontawesome_url' => FONTAWESOME_URL,
        ':bootstrap_url' => 'http://getbootstrap.com',
      )) . '</p>';
  }
}

/**
 * Implements hook_libraries_info().
 */
function fontawesome_libraries_info() {
  $libraries[FONTAWESOME_LIBRARY] = array(
    'name' => FONTAWESOME_NAME,
    'vendor url' => FONTAWESOME_URL,
    'download url' => FONTAWESOME_DOWNLOAD_URL,
    'version arguments' => array(
      'file' => 'css/font-awesome.css',
      'pattern' => '/((?:\d+\.?){2,3})/',
      'lines' => 10,
      'cols' => 14,
    ),
    'files' => array(
      'css' => array(
        'css/font-awesome.css',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook__page_attachments().
 *
 * Purposefully only load on page requests and not hook_init(). This is
 * required so it does not increase the bootstrap time of Drupal when it isn't
 * necessary.
 */
function fontawesome_page_attachments(array &$page) {
  if (\Drupal::config('fontawesome.settings')->get('fontawesome_use_cdn')) {
    $page['#attached']['library'][] = 'fontawesome/fontawesome.cdn';
  }
  else {
    $library = libraries_detect(FONTAWESOME_LIBRARY);
    if (!$library['installed']) {
      drupal_set_message($library['error message'] . t('Please make sure that '
              . 'fontawesome was download & extracted at /libraries/fontawesome directory.'
              . 'Please check README.txt for more details.'),
              'warning');
    }
    else {
      $page['#attached']['library'][] = 'fontawesome/fontawesome';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a checkbox to Drupal Bandwidth optimization settings in performance page
 * to provide an option to load CDN version of FontAwesome.
 */
function fontawesome_form_system_performance_settings_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['bandwidth_optimization']['fontawesome_use_cdn'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use CDN version of FontAwesome.'),
    '#default_value' => \Drupal::config('fontawesome.settings')->get('fontawesome_use_cdn'),
  );
  $form['#submit'][] = 'fontawesome_form_system_performance_settings_alter_submit';
}

/**
 * Save configurations
 */
function fontawesome_form_system_performance_settings_alter_submit($form, $form_state) {
  \Drupal::configFactory()->getEditable('fontawesome.settings')
   ->set('fontawesome_use_cdn', $form_state->getValue('fontawesome_use_cdn'))
   ->save();
}

/**
 * Implements hook_icon_providers().
 */
function fontawesome_icon_providers() {
  $providers[FONTAWESOME_LIBRARY] = array(
    'title' => FONTAWESOME_NAME,
    'url' => FONTAWESOME_URL,
  );
  return $providers;
}

/**
 * Implements hook_icon_bundle_configure().
 */
function fontawesome_icon_bundle_configure(&$settings, &$form_state, &$complete_form) {
  $bundle = $form_state['bundle'];
  if ($bundle['provider'] === FONTAWESOME_LIBRARY) {
    $settings['tag'] = array(
      '#type' => 'select',
      '#title' => t('HTML Markup'),
      '#description' => t('Choose the HTML markup tag that @fontawesome icons should be created with. Typically, this is a %tag tag, however it can be changed to suite the theme requirements.', array(
        '@fontawesome' => FONTAWESOME_NAME,
        '%tag' => '<' . $bundle['settings']['tag'] . '>',
      )),
      '#options' => array_combine(array('i', 'span', 'div'), array('i', 'span', 'div')),
      '#default_value' => $bundle['settings']['tag'],
    );
  }
}

/**
 * Implements hook_preprocess_icon_RENDER_HOOK().
 */
function fontawesome_preprocess_icon_sprite(&$variables) {
  $bundle = &$variables['bundle'];
  if ($bundle['provider'] === FONTAWESOME_LIBRARY) {
    // Remove the default "icon" class.
    $key = array_search('icon', $variables['attributes']['class']);
    if ($key !== FALSE) {
      unset($variables['attributes']['class'][$key]);
    }

    // Add the necessary FA identifier class.
    $variables['attributes']['class'][] = FONTAWESOME_PREFIX;

    // Prepend the icon with the FA prefix (which will be used as the class).
    $variables['icon'] = FONTAWESOME_PREFIX . '-' . $variables['icon'];
  }
}

/**
 * Implements hook_icon_bundles().
 *
 * @todo Extract icons from CSS or JSON file (currently not possible).
 */
function fontawesome_icon_bundles() {
  $bundles[FONTAWESOME_LIBRARY] = array(
    'title' => FONTAWESOME_NAME,
    'provider' => FONTAWESOME_LIBRARY,
    'render' => 'sprite',
    'settings' => array(
      'tag' => 'i',
    ),
    'icons' => fontawesome_extract_icons(),
  );
  return $bundles;
}
/**
 * Extracts all icons from the CSS file.
 *
 * @return array
 */
function fontawesome_extract_icons() {
  // If CDN is enabled, get CSS content from the CDN URL
  if (\Drupal::config('fontawesome.settings')->get('fontawesome_use_cdn')) {
    $url = FONTAWESOME_CDN_URL;

    // The URL needs to have a schema to work with drupal_http_request
    if (strpos($url, '//') === 0) {
      $url = 'http:' . $url;
    }

    $response = \Drupal::httpClient()->get($url, array('headers' => array('Accept' => 'text/plain')));
    $content = (string) $response->getBody();
  }
  // Otherwise get CSS content from the local library
  else if(\Drupal::moduleHandler()->moduleExists('libraries')){
    $library = libraries_load(FONTAWESOME_LIBRARY);
    $filepath = DRUPAL_ROOT . '/' . $library['library path'] . '/css/font-awesome.css';

    $content = file_exists($filepath) ? file_get_contents($filepath) : '';
  }

  // Parse the CSS content
  if (preg_match_all('@\.fa-(.*?):before@m', $content, $matches)) {
    $icons = $matches[1];
    asort($icons);
    return array_combine($icons, $icons);
  }

  return array();
}
