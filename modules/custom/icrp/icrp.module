<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpFoundation\Request;
use \Drupal\node\Entity\Node;

/*
 * source: https://www.youtube.com/watch?v=L5x3WqTZPGk
 * @25:58 minutes
 * Overview of rendering flow
 * 1. drupal_render()
 *   2. #pre_render
 *   3. _theme()
 *     4. Theme suggestion hooks
 *     5. Preprocess functions
 *     6. Template is rendered
 *   7. #post_render
 *
 */
function newsletter2() {

    return t('Newsletter Code.');

}

function hello_hello_world() {

    return t('Hello Drupal 8 World!');

}
function editContent() {
    return t("You are about to review a user, congrats.");
}

function reviewUserForm($uuid) {
    return t("You are about to review a user: ".$uuid);
}
/*
function icrp_user_login($account) {
    // We want to redirect user on login.
    $response = new RedirectResponse("mypath");
    $response->send();
    return;
}
*/

function mod_user_login($account) {
    $url = "/home";
    $response = new Symfony\Component\HttpFoundation\RedirectResponse($url);
    $response->send();
    return;
}
/*
function get_user($uuid) {
    $user = array('first name' => "Chris", 'last_name' => "Kneisler");
    return $user;
}

Home on navigation
Order of navigation, nav, breadcrumb & status
Remove Library page

*/

function hook_form_yamlform_submission_update_my_profile_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    // Modification for the form with the given form ID goes here. For example, if
    // FORM_ID is "user_register_form" this code would run only on the user
    // registration form.

    // Add a checkbox to registration form about agreeing to terms of use.
    /*
    $form['terms_of_use'] = array(
        '#type' => 'checkbox',
        '#title' => t("I agree with the website's terms and conditions."),
        '#required' => TRUE,
    );
    */
}

/**
 * @param $variables
 */
function icrp_preprocess_my_element(&$variables) {
    drupal_set_message("In preprocess");
    //$variables['attributes']['id'] = 'my_blue_element_altered_id';
}

/**
 * Implements hook_theme().
 */
function icrp_theme() {
    return [
        'my_profile_form' => [
            'render element' => 'form',
        ],
    ];
}

/**
 * Implements hook_form_alter().
 */
function icrp_hook_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
    $form['link'] = array('#markup' => l(t('Link text'),'node'));
    switch ($form_id) {
        case 'user-pass-reset':
            $form['terms_of_use'] = array(
                '#type' => 'checkbox',
                '#title' => t("I agree with the website's terms and conditions."),
                '#required' => TRUE,
            );
            break;
        case 'user_login_block':
            $form['link'] = array('#markup' => l(t('Link text'),'node'));
            break;
        case 'webform_submission_contact_form':
            // Set Type of Issue default value
            $form['elements']['contact_us']['contact_us_container_1']['type_of_issue']['#default_value'] = "Register for CSO Updates";

            // Pre-load user information if available
            $uid = \Drupal::currentUser()->id();
            if($uid > 0 ) {
                $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
                //kint($user);

                $name = $user->get('field_first_name')->value . ' ' . $user->get('field_last_name')->value;
                //drupal_set_message("Name: ". $name);
                $form['elements']['contact_us']['contact_us_container_2']['contact_us_left']['name']['#value'] = $name;

                $email = $user->get('mail')->value;
                $form['elements']['contact_us']['contact_us_container_2']['contact_us_right']['email']['#value'] = $email ;
                //$org = $user->get('field_organization')->target_id;
                // Org currently contains the index to the organization list - a lookup will need to be added to set organization
                //$form['elements']['contact_us']['contact_us_container_2']['contact_us_left']['organization']['#value'] = $org ;
                //$phone = "";
                //$form['elements']['contact_us']['contact_us_container_2']['contact_us_right']['phone_number']['#value'] = $phone;
                //  currently phone number is not stored with user information
            }

            break;

    }
    if ($form_id == 'user_form_what') {
        $form['#submit'][] = '_MODULE_goto';
        $form['terms_of_use'] = array(
            '#type' => 'checkbox',
            '#title' => t("I agree with the website's terms and conditions."),
            '#required' => TRUE,
        );
    }
}

//drupal_set_message("My Goodness");

function hook_form_user_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    // Modification for the form with the given form ID goes here. For example, if
    // FORM_ID is "user_register_form" this code would run only on the user
    // registration form.

    // Add a checkbox to registration form about agreeing to terms of use.
    /*
    $form['terms_of_use'] = array(
        '#type' => 'checkbox',
        '#title' => t("I agree with the website's terms and conditions."),
        '#required' => TRUE,
    );
    */
}
/*
function icrp_page_alter(&$) {

}
*/
/*
function icrp_views_pre_execute(ViewExecutable $view) {
    // Whenever a view queries more than two tables, show a message that notifies
    // view administrators that the query might be heavy.
    // (This action could be performed later in the execution process, but not
    // earlier.)
    $account = \Drupal::currentUser();

    if (count($view->query->tables) > 2 && $account->hasPermission('administer views')) {
        drupal_set_message(t('The view %view may be heavy to execute.', array('%view' => $view->id())), 'warning');
    }
}
*/

function icrp_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

    //drupal_set_message("Form ID: ".$form_id);
    //kint("Hello");
    //kint(print_r(array, true));


    switch ($form_id) {
        case 'block_content_basic_edit_form';
            if (strpos($form['info']['widget']['0']['value']['#default_value'],"Partner Home") !== false) {
                unset($form['revision_information']);                     // Remove Revisions section from block edit page
                unset($form['actions']['delete']);                        // Remove Delete button from block edot page
                unset($form['info']);                                     // Remove ablity to edit block title
                $form['body']['widget']['0']['#title'] = $form['#title']; // Set Block Edit heading
                $form['actions']['cancel'] = array(                       // Add Cancel button
                    '#type'   => 'button',
                    '#value'  => t('Cancel'),
                    '#attributes' => array('onClick' => 'history.go(-1); return true;'),
                    '#weight' => 100,
                );
            }
            break;
        case 'user_register_form':
            //drupal_set_message("user_register_form");
            populateOrganizations();
            break;
        case 'views-exposed-form':
            $form['terms_of_use'] = array(
                '#type' => 'checkbox',
                '#title' => t("I agree with the website's terms and conditions."),
                '#required' => TRUE,
            );
        case 'user_login':
        case 'user_login_form':
            //$form['link'] = array('#markup' => t("<div style=padding:20px;'><a href='/user/password'>Forgot Password?</a></div>"));
            break;
    }
    //kint($form);
    /*
        drupal_set_message("icrp_form_alter: ".$form_id);
        $form['#submit'][] = '_MODULE_goto';
        $form['terms_of_use'] = array(
            '#type' => 'checkbox',
            '#title' => t("I agree with the website's terms and conditions."),
            '#required' => TRUE,
        );

        if ($form_id == 'user_form') {
            $form['#submit'][] = '_MODULE_goto';
            $form['terms_of_use'] = array(
                '#type' => 'checkbox',
                '#title' => t("I agree with the website's terms and conditions."),
                '#required' => TRUE,
            );
        }

        if (isset($form['type']) && $form['type']['#value'] . '_node_settings' == $form_id) {
            $upload_enabled_types = \Drupal::config('mymodule.settings')->get('upload_enabled_types');
            $form['workflow']['upload_' . $form['type']['#value']] = array(
                '#type' => 'radios',
                '#title' => t('Attachments'),
                '#default_value' => in_array($form['type']['#value'], $upload_enabled_types) ? 1 : 0,
                '#options' => array(t('Disabled'), t('Enabled')),
            );
            // Add a custom submit handler to save the array of types back to the config file.
            $form['actions']['submit']['#submit'][] = 'mymodule_upload_enabled_types_submit';
        }
    */
}

/*
 * Add organizatins from a remote REST service to the organization entity.
 *
 */
function populateOrganizations() {
    //Example: http://drupal.stackexchange.com/questions/128274/consuming-restful-web-services
    //drupal_set_message("populateOrganizations");
    //Disabled for now.
    return;
    /*
     * STEP 1: Write an AJAX call to retrieve url above
     * Search Drupal 8 Ajax call
     */

    $organizations = getRestOrganizations();

    //Decode json and populate entity.
    /*
     * STEP 2: Save into enitity type Organization
     */
    if(sizeof($organizations) > 0) {
        checkOrganizations($organizations);
    }


}

/*
 * Returns list of organizations from a rest service
 *
 */
function getRestOrganizations() {
    //Use ajax to pull url
    //TODO: the host should just poit to self.  Maybe exclude host and just send to /getFundingOrgNames

    //$host = "icrpartnership-test.org";
    $host = \Drupal::request()->getSchemeAndHttpHost();
    //$host = "https://icrpartnership-dev.org";
    //drupal_set_message($host);
    $url = $host."/getFundingOrgNames";
    \Drupal::logger('icrp')->notice("getRestOrganization pulling url: " . $url);
    try {
        $client = \Drupal::service('http_client');
        $result = $client->get($url, ['Accept' => 'application/json']);
        $status = $result->getStatusCode();
        //drupal_set_message($status);

        if ($status != 200) {
            \Drupal::logger('icrp')->warning("getRestOrganization failed: Status Code: " . $status);
            return array();
        }
    } catch(Exception $e) {
        \Drupal::logger('icrp')->warning("Rest Service failed: " . $e->getMessage());
        return array();

    }

    //drupal_set_message($status);

    $output = $result->getBody();
    //drupal_set_message($output);
    /* "auto" is expanded to "ASCII,JIS,UTF-8,EUC-JP,SJIS" */
    //$output = mb_convert_encoding($output, "UTF-8", "auto");

    return json_decode($output, true);
}
/*
 * Check organizations enitty to see if any organizations need to be added to the organization entity
 */
function checkOrganizations($organizations) {
    // Get a list of current organizations

    $sql = "select title from node_field_data 
            where status = 1 and type = 'organization' 
            order by title ASC;";
    $current_organizations = db_query($sql)->fetchCol();
    //drupal_Set_message(print_r($current_organizations, true));

    // If Organization doesn't exist then save into database
    foreach($organizations as $key => $organization_name) {
        if(!in_array($organization_name, $current_organizations)) {
            //drupal_set_message("Adding: ".strlen($organization_name)." ".$organization_name);
            addOrganization($organization_name);
        } else {
            //drupal_set_message("Skipping: ".$organization_name);
        }
    }
}

/*
 * Add new organization to organization entity.
 */
function addOrganization($organization_name) {

    \Drupal::logger('icrp')->notice("Adding ".$organization_name." to organization.");

    $node = Node::create(array('title' => $organization_name, 'status' => '1', 'type' => 'organization'));
    $node->save();
}
