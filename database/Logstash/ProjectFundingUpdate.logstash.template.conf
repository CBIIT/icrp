input {
  jdbc {
    jdbc_connection_string => "jdbc:mysql://<mysql hostname>:3306/icrp_data"
    jdbc_user => "<user>"
    jdbc_password => "<password>"
    jdbc_driver_library => "<mysql jdbc driver path>"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    statement => "SELECT * FROM vwProjectExtensions"
  }
}
filter {
  mutate {
    split => {
      "calendaryears" => ","
      "csocodes" => ","
    }
  }
  mutate {
    convert => {
      "calendaryears" => "integer"
      "csocodes" => "integer"
    }
  }
  aggregate {
    task_id => "%{projectid}"
    code => "
      map['projectfundingid'] ||= -1
      if map['projectfundingid'] != event.get('projectfundingid')
        map['cancertypes'] = {}
      end
      map['projectfundings'] ||= {}
      
      map['cancertypes'][event.get('cancertypeid')] = event.get('cancertype')
      
      map['tmp'] = {}
      map['tmp']['title'] = event.get('title')
      map['tmp']['fundingcontact'] = event.get('fundingcontact')
      map['tmp']['budgetstartdate'] = event.get('budgetstartdate')
      map['tmp']['budgetenddate'] = event.get('budgetenddate')
      map['tmp']['amount'] = event.get('amount')
      map['tmp']['fundingorgid'] = event.get('fundingorgid')
      map['tmp']['pilastname'] = event.get('pilastname')
      map['tmp']['pifirstname'] = event.get('pifirstname')
      map['tmp']['piorcid'] = event.get('piorcid')
      map['tmp']['institution'] = event.get('institution')
      map['tmp']['city'] = event.get('city')
      map['tmp']['state'] = event.get('state')
      map['tmp']['country'] = event.get('country')
      map['tmp']['fundingorg'] = event.get('fundingorg')
      map['tmp']['fundingorgshort'] = event.get('fundingorgshort')
      map['tmp']['fundingorgtype'] = event.get('fundingorgtype')
      map['tmp']['calendaryears'] = event.get('calendaryears')
      map['tmp']['csocodes'] = event.get('csocodes')
      map['tmp']['cancertypes'] = map['cancertypes']
      
      map['projectfundings'][event.get('projectfundingid')] = map['tmp']
      
      map['projectfundingid'] = event.get('projectfundingid')
      
      event.cancel()
    "
    push_previous_map_as_event => true
    inactivity_timeout => 5
    timeout_task_id_field => "projectid"
  }
  mutate {
    convert => { "projectid" => "integer" }
    remove_field => [ "tmp", "cancertypes", "projectfundingid", "tags" ]
  }
}
output {
  stdout { codec => json_lines }
  elasticsearch {
    "hosts" => "https://<elastic hostname>:443"
    "index" => "project_criteria"
    "document_type" => "data"
    "document_id" => "%{projectid}"
    "doc_as_upsert" => true
    "action" => "update"
  }
}
